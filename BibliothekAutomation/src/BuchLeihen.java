
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class BuchLeihen extends javax.swing.JFrame {

    /**
     * Creates new form BuchLeihen
     */
    public BuchLeihen() {
        initComponents();
        
        buchleihenBücher_live_zeigen();
        
        //damit das Fenster in der Mitte vom Bildschirm stehen bleibt
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BLTabelle = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        BLNamevonBuchFeld = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        BLAutorFeld = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        BLStudentnummerFeld = new javax.swing.JTextField();
        BLZNehmenButton = new javax.swing.JButton();
        zurück = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        BLBuchIDFeld = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        BLBuchSuchenFeld = new javax.swing.JTextField();
        refreshIcon = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        BLGebührsfeld = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        zahlungsIcon = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Studenten geliehenen Bücher");

        BLTabelle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Buch ID", "Name von Buch", "Author", "Studentnummer", "Datum"
            }
        ));
        BLTabelle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BLTabelleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BLTabelle);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Name von Buch:");

        BLNamevonBuchFeld.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Author :");

        BLAutorFeld.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Studentnummer :");

        BLStudentnummerFeld.setEnabled(false);

        BLZNehmenButton.setBackground(new java.awt.Color(51, 204, 255));
        BLZNehmenButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BLZNehmenButton.setText("Buch Zurücknehmen");
        BLZNehmenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BLZNehmenButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BLZNehmenButtonMouseExited(evt);
            }
        });
        BLZNehmenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLZNehmenButtonActionPerformed(evt);
            }
        });

        zurück.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc\\Desktop\\Tulpar için\\Bachelorarbeit\\Icons & Bilder\\back.png")); // NOI18N
        zurück.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zurückMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                zurückMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                zurückMouseExited(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Buch ID :");

        BLBuchIDFeld.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Buch Suchen");

        BLBuchSuchenFeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                BLBuchSuchenFeldKeyReleased(evt);
            }
        });

        refreshIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc\\Desktop\\Tulpar için\\Bachelorarbeit\\Icons & Bilder\\refresh.png")); // NOI18N
        refreshIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshIconMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshIconMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshIconMouseExited(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Verspätungsgebühr :");

        BLGebührsfeld.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("TL");

        zahlungsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/zahlungGrün.png"))); // NOI18N
        zahlungsIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zahlungsIconMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                zahlungsIconMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                zahlungsIconMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BLNamevonBuchFeld, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                            .addComponent(BLAutorFeld)
                            .addComponent(BLStudentnummerFeld)
                            .addComponent(BLBuchIDFeld)
                            .addComponent(BLGebührsfeld)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(zurück)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refreshIcon, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(BLZNehmenButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zahlungsIcon, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BLBuchSuchenFeld)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(BLBuchSuchenFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zurück)
                        .addGap(46, 46, 46)
                        .addComponent(refreshIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(BLBuchIDFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(BLNamevonBuchFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(BLAutorFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(BLStudentnummerFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(BLGebührsfeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zahlungsIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BLZNehmenButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BLZNehmenButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BLZNehmenButtonMouseEntered
        BLZNehmenButton.setBackground(new Color(0,100,200));
    }//GEN-LAST:event_BLZNehmenButtonMouseEntered

    private void BLZNehmenButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BLZNehmenButtonMouseExited
        BLZNehmenButton.setBackground(new Color(51,204,255));
    }//GEN-LAST:event_BLZNehmenButtonMouseExited

    private void BLZNehmenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLZNehmenButtonActionPerformed
        if(InputPrüfen()){
            if(!BLGebührsfeld.getText().equals("0")){
                //hier gibts ein Zahlungsalert , der zeigt , dass X Student muss y TL Gebühr vergüten muss
                //wenn bezahlt, klicken Sie den Zahlungsbutton unten!, wenn geklickt, wird den Gebühr 0
                JOptionPane.showMessageDialog(null, "Wegen Verspätung muss Student "+BLGebührsfeld.getText()+" TL zahlen!\n"+ "Wenn bezahlt, bitte klicken Sie den Zahlungsbutton unten.","SCHULD",2);
            }else{
                
                //veritabanından ilgili kitap alınır ve buch veritabanına geri eklenir.
                //relevantes Buch wird von der DB geholt und es auf Buchdb gesendet
                try {
                    BibliothekColumns buchFürB = null;
                    
                    PreparedStatement st;
                    ResultSet rs;
                    
                    String SQLAnfrage_Buchdatennehmen ="SELECT * FROM buchleihen WHERE buchID=?";
                    String SQLAnfrage_buchLoschen_vonBLDB ="DELETE FROM buchleihen WHERE buchID=?";
                    String SQLAnfrage_Buchdatensenden_zuBuchDB ="INSERT INTO `buch` (`buchID`,`buchname`,`author`,`auflagesdatum`,`thema`,`verlag`) VALUES(?,?,?,?,?,?)";

                    st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage_Buchdatennehmen);
                    st.setInt(1, Integer.valueOf(BLBuchIDFeld.getText()));
                    rs = st.executeQuery();
                        
                    //Gewollte Buchdaten sind von der Buchleihen DB herausgeholt und in Object buchFürB gespeichert.
                    while(rs.next()){
                        buchFürB = new BibliothekColumns(rs.getInt("buchID"), rs.getString("buchname"), rs.getString("author"), rs.getString("auflagesdatum"),
                        rs.getString("thema"), rs.getString("verlag"));
                    }
                    System.out.println(buchFürB.getAuflagesdatum());
                    //dbverbindung zu
                    rs.close();
                    st.close();
                    System.out.println(buchFürB.getAuflagesdatum());
                    //----------------------------------------------------------------------------------------------
                    //Daten werden hier zu BuchDB gesendet
                    st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage_Buchdatensenden_zuBuchDB);
                    st.setInt(1, buchFürB.getBuchID());
                    st.setString(2, buchFürB.getBuchname());
                    st.setString(3, buchFürB.getAuthor());
                    st.setString(4, buchFürB.getAuflagesdatum());
                    st.setString(5, buchFürB.getThema());
                    st.setString(6, buchFürB.getVerlag());
                    System.out.println(buchFürB.getAuflagesdatum());
                    st.executeUpdate();
                    rs.close();
                    st.close();
                    System.out.println(buchFürB.getAuflagesdatum());
                    //-----------------------------------------------------------------------------------------------
                    //anschließend werden relevante Buchdaten von der Datenbank BuchLeihen gelöscht
                    st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage_buchLoschen_vonBLDB);
                    st.setInt(1, Integer.valueOf(BLBuchIDFeld.getText()));
                    st.executeUpdate();
                    rs.close();
                    st.close();
                    
                    FelderSauberMachen();
                    JOptionPane.showMessageDialog(null, "Buch wurde erfolgreich genommen! Dankeschön!\nBuch wurde wieder auf BuchDB speichert und von BuchleihenDB gelöscht!");
                        dispose();
                        new Bibliothek().setVisible(true);
                } catch (Exception e) {
                    System.out.println(e);
                }
                /*
                !!!!!!!!!!!!!SORUN!!!!!!!!!!!!!!
                Kitap geri yüklenirken auflagesdatum verisi eksik olacağından veritabanına geri gönderme işlemi başarısız olacak
                Yüksek ihtimalle buchleihen veritabanında ve columns sınıflarında ek bir auflagesdatum depolama alanları açılacak ve sorun böylece çözülebilecek
                */
                //kitap basarıyla eklendi yazısı
                //ve kütüphane arayüzüne geri dönülür.
            }
        }

    }//GEN-LAST:event_BLZNehmenButtonActionPerformed

    private void zurückMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zurückMouseEntered
        Border border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black);
        zurück.setBorder(border);
    }//GEN-LAST:event_zurückMouseEntered

    private void zurückMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zurückMouseExited
        zurück.setBorder(null);
    }//GEN-LAST:event_zurückMouseExited

    private void zurückMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zurückMouseClicked
        dispose();
        new Bibliothek().setVisible(true);
    }//GEN-LAST:event_zurückMouseClicked

    private void BLBuchSuchenFeldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BLBuchSuchenFeldKeyReleased
        String suchSchlüssel = BLBuchSuchenFeld.getText();
        
        BuchSuchen(suchSchlüssel);
    }//GEN-LAST:event_BLBuchSuchenFeldKeyReleased
    
    void BuchSuchen(String suchSchlüssel) {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>((DefaultTableModel)BLTabelle.getModel());
        
        sorter.setRowFilter(RowFilter.regexFilter(suchSchlüssel));
        BLTabelle.setRowSorter(sorter);
    }
    
    private void BLTabelleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BLTabelleMouseClicked
        try {
            bücherdaten_inLücken_übertragen();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_BLTabelleMouseClicked

    private void refreshIconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshIconMouseEntered
        Border border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK);
        refreshIcon.setBorder(border);
    }//GEN-LAST:event_refreshIconMouseEntered

    private void refreshIconMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshIconMouseExited
        refreshIcon.setBorder(null);
    }//GEN-LAST:event_refreshIconMouseExited

    private void refreshIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshIconMouseClicked
        FelderSauberMachen();
    }//GEN-LAST:event_refreshIconMouseClicked

    private void zahlungsIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zahlungsIconMouseClicked
        if(InputPrüfen()){
            if(!BLGebührsfeld.getText().equals("0")){
                //gebühr wird in der Tabelle buchzahlung gespeichert.
                String studentNummer = BLStudentnummerFeld.getText();
                String betrag = BLGebührsfeld.getText();
                
                PreparedStatement st;
                ResultSet rs;
                
                String SQLAnfrage ="INSERT INTO `buchzahlung` (`studentnummer`,`betrag`) VALUES(?,?)";
               
                try {
                    st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage);
                    st.setString(1, studentNummer);
                    st.setString(2, betrag);
                    
                    //prüfen ob daten erfolgreich in System gespeichert werden
                    if(st.executeUpdate()!=0){
                        JOptionPane.showMessageDialog(null, BLGebührsfeld.getText()+" TL wurde gezahlt!");
                        BLGebührsfeld.setText("0");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Fehler beim Speichern des Betrags!","Fehlerhafte Transaktion",2);
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Es gibt keinen Gebühr zu zahlen!");
            }
        }
    }//GEN-LAST:event_zahlungsIconMouseClicked

    private void zahlungsIconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zahlungsIconMouseEntered
        Border border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK);
        zahlungsIcon.setBorder(border);
    }//GEN-LAST:event_zahlungsIconMouseEntered

    private void zahlungsIconMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zahlungsIconMouseExited
        zahlungsIcon.setBorder(null);
    }//GEN-LAST:event_zahlungsIconMouseExited
    
    void bücherdaten_inLücken_übertragen(){
        try {
            /*
            BLBuchIDFeld.setText(String.valueOf(BLgetBücherDaten().get(index).getBuchID()));
            BLNamevonBuchFeld.setText(BLgetBücherDaten().get(index).getBuchname());
            BLAutorFeld.setText(BLgetBücherDaten().get(index).getAuthor());
            BLStudentnummerFeld.setText(BLgetBücherDaten().get(index).getStudentnummer());
            */
            DefaultTableModel tableModel = (DefaultTableModel)BLTabelle.getModel();
            
            int row = BLTabelle.getSelectedRow();
            
            BLBuchIDFeld.setText(String.valueOf(tableModel.getDataVector().elementAt(BLTabelle.convertRowIndexToModel(row)).get(0)));
            BLNamevonBuchFeld.setText(String.valueOf(tableModel.getDataVector().elementAt(BLTabelle.convertRowIndexToModel(row)).get(1)));
            BLAutorFeld.setText(String.valueOf(tableModel.getDataVector().elementAt(BLTabelle.convertRowIndexToModel(row)).get(2)));
            BLStudentnummerFeld.setText(String.valueOf(tableModel.getDataVector().elementAt(BLTabelle.convertRowIndexToModel(row)).get(3)));
            
            //folgende Koden werden benutzt, um den Verspätungsgebühr zu kalkulieren. Für jeden Tag der Verspätung 5 TL
            String datuminDatenbank = String.valueOf(tableModel.getDataVector().elementAt(BLTabelle.convertRowIndexToModel(row)).get(4));
            //heutiges Datum
            String pattern = "dd-MM-yyyy";
            String heutigesDatum =new SimpleDateFormat(pattern).format(new java.util.Date());
            
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
            DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            
            //formatted from dd-MM-yyyy to yyyy-MM-dd to substract two days
            String heutigesDatum_konvertiert = LocalDate.parse(heutigesDatum, formatter).format(formatter2);
            String datuminDB_konvertiert = LocalDate.parse(datuminDatenbank, formatter).format(formatter2);
            
            //Substraction zwischen zwei Daten
            LocalDate d1 = LocalDate.parse(heutigesDatum_konvertiert, DateTimeFormatter.ISO_LOCAL_DATE);
            LocalDate d2 = LocalDate.parse(datuminDB_konvertiert, DateTimeFormatter.ISO_LOCAL_DATE);
            Duration unterschied = Duration.between(d2.atStartOfDay(), d1.atStartOfDay());
            long unterschied_inTage = unterschied.toDays();
            long gebühr = 0;
            //Für jeden Tag der Verspätung(Ein buch muss innerhalb 14 Tagen zurückgenommen werden) zahlt der Student 5 TL
            if(unterschied_inTage<=14){
                unterschied_inTage = 0;
            }else {
                gebühr = (unterschied_inTage - 14)* 5;
            }
            
            BLGebührsfeld.setText(String.valueOf(gebühr));
            
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    ArrayList<BuchLeihenColumns> BLgetBücherDaten(){
        //hier speichern wir die ganzen Bücherdaten
        ArrayList<BuchLeihenColumns> bücher = new ArrayList<>();
        
        PreparedStatement st;
        ResultSet rs;
        
        String SQLAnfrage = "SELECT * FROM buchleihen";
        
        try {
            st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage);
            rs = st.executeQuery();
            
            //eine Objekt von der Klasse BuchLeihenColumns, damit die sich im System befundenen Bücherdaten gespeichert werden
            BuchLeihenColumns buch;
            
            while(rs.next()){
                buch = new BuchLeihenColumns(rs.getInt("buchID"),rs.getString("buchname"),rs.getString("author"),rs.getString("auflagesdatum"),rs.getString("thema"),
                    rs.getString("verlag"),rs.getString("studentnummer"),rs.getString("datum"));
                bücher.add(buch);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return bücher;
    }
    
    void buchleihenBücher_live_zeigen(){
        try {
            
            ArrayList<BuchLeihenColumns> BLBücher_list = BLgetBücherDaten();
            
            DefaultTableModel model = (DefaultTableModel) BLTabelle.getModel();
                model.setRowCount(0);
                
            for(BuchLeihenColumns buch : BLBücher_list){
                String buchID = String.valueOf(buch.getBuchID());
                String buchname = buch.getBuchname();
                String author = buch.getAuthor();
                String studentnummer = buch.getStudentnummer();
                String datum = buch.getDatum();
               
                Object[] data = {buchID, buchname, author, studentnummer, datum};
                
                //durch die Methode unten, zeigen wir die Bücherdaten für BuchLeihen rechtzeitig
                model.addRow(data);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    boolean InputPrüfen(){
        
        String buchID = BLBuchIDFeld.getText();
        String buchname = BLNamevonBuchFeld.getText();
        String author = BLAutorFeld.getText();
        String studentnummer = BLStudentnummerFeld.getText();
        String gebühr = BLGebührsfeld.getText();
        
        if(buchID.trim().equals("") || buchname.trim().equals("") || author.trim().equals("") || studentnummer.trim().equals("") || gebühr.trim().equals("")){
            JOptionPane.showMessageDialog(null, "Jedes Feld muss vollständig erfüllt werden!","FEHLER bei Input",2);
            FelderSauberMachen();
            return false;
        }else{
            return true;
        }
    }
    void FelderSauberMachen(){
        BLBuchIDFeld.setText("");
        BLNamevonBuchFeld.setText("");
        BLAutorFeld.setText("");
        BLStudentnummerFeld.setText("");
        BLGebührsfeld.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuchLeihen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuchLeihen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuchLeihen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuchLeihen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuchLeihen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BLAutorFeld;
    private javax.swing.JTextField BLBuchIDFeld;
    private javax.swing.JTextField BLBuchSuchenFeld;
    private javax.swing.JTextField BLGebührsfeld;
    private javax.swing.JTextField BLNamevonBuchFeld;
    private javax.swing.JTextField BLStudentnummerFeld;
    private javax.swing.JTable BLTabelle;
    private javax.swing.JButton BLZNehmenButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel refreshIcon;
    private javax.swing.JLabel zahlungsIcon;
    private javax.swing.JLabel zurück;
    // End of variables declaration//GEN-END:variables

    
}
