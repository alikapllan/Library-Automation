
import com.sun.jdi.connect.spi.Connection;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.border.Border;

public class AdminDatenZeigen extends javax.swing.JFrame {

    /**
     * Creates new form AdminDatenZeigen
     */
    public AdminDatenZeigen() {
        initComponents();
        
        dBVerbindung.getConnection();
        //Admindaten live zeigen lassen
        admindaten_live_zeigen();
        
        //nur ein Button sollte selektiert werden, darum erstellte sich eine Buttongruppe und wurde buttons drin gesteckt.
            ButtonGroup bg =new ButtonGroup();
                bg.add(maenlich);
                bg.add(weiblich);
                bg.add(andere);
        
        //damit User das Geburtsdatum nur durch Klicken von Calendar Form eingeben kann
        JTextFieldDateEditor editor = (JTextFieldDateEditor)geburtsdatumfeld.getDateEditor();
        editor.setEditable(false);
        //damit das Fenster in der Mitte vom Bildschirm stehen bleibt
        this.setLocationRelativeTo(null);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        maenlich = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        weiblich = new javax.swing.JRadioButton();
        NARnicknameFeld = new javax.swing.JTextField();
        andere = new javax.swing.JRadioButton();
        NARvornameFeld = new javax.swing.JTextField();
        datenAktualisierenButton = new javax.swing.JButton();
        NARnachnameFeld = new javax.swing.JTextField();
        NARemailsFeld = new javax.swing.JTextField();
        NARnummerFeld = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        NARkennwortsfeld1 = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        NARkennwortsfeld2 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelle = new javax.swing.JTable();
        datenLöschenButton = new javax.swing.JButton();
        adminHinzufügenButton = new javax.swing.JButton();
        geburtsdatumfeld = new com.toedter.calendar.JDateChooser();
        zurück = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        adminIDfeld = new javax.swing.JTextField();
        refreshIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admindaten");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Kennwort:");

        maenlich.setText("Männlich");

        jLabel9.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc\\Desktop\\Tulpar için\\Bachelorarbeit\\Icons & Bilder\\marmara_universitesi_logo.png")); // NOI18N

        weiblich.setText("Weiblich");

        NARnicknameFeld.setEnabled(false);
        NARnicknameFeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NARnicknameFeldKeyTyped(evt);
            }
        });

        andere.setText("Andere");

        NARvornameFeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NARvornameFeldKeyTyped(evt);
            }
        });

        datenAktualisierenButton.setBackground(new java.awt.Color(51, 204, 255));
        datenAktualisierenButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        datenAktualisierenButton.setText("Daten Aktualisieren");
        datenAktualisierenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                datenAktualisierenButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                datenAktualisierenButtonMouseExited(evt);
            }
        });
        datenAktualisierenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datenAktualisierenButtonActionPerformed(evt);
            }
        });

        NARnachnameFeld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NARnachnameFeldActionPerformed(evt);
            }
        });
        NARnachnameFeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NARnachnameFeldKeyTyped(evt);
            }
        });

        NARemailsFeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NARemailsFeldKeyTyped(evt);
            }
        });

        NARnummerFeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NARnummerFeldKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Kennwort wieder:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Vorname: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Nachname:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Geburtsdatum:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Geschlecht: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Nickname:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Email: ");

        NARkennwortsfeld1.setText("Kennwort");
        NARkennwortsfeld1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NARkennwortsfeld1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                NARkennwortsfeld1FocusLost(evt);
            }
        });
        NARkennwortsfeld1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NARkennwortsfeld1ActionPerformed(evt);
            }
        });
        NARkennwortsfeld1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NARkennwortsfeld1KeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Handynummer: ");

        NARkennwortsfeld2.setText("Kennwort");
        NARkennwortsfeld2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NARkennwortsfeld2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                NARkennwortsfeld2FocusLost(evt);
            }
        });
        NARkennwortsfeld2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NARkennwortsfeld2KeyTyped(evt);
            }
        });

        tabelle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admin ID", "Nickname", "Kennwort", "Vorname", "Nachname", "Geburtsdatum", "Geschlecht", "Email", "Handynummer"
            }
        ));
        tabelle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelle);

        datenLöschenButton.setBackground(new java.awt.Color(51, 204, 255));
        datenLöschenButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        datenLöschenButton.setText("Daten Löschen");
        datenLöschenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                datenLöschenButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                datenLöschenButtonMouseExited(evt);
            }
        });
        datenLöschenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datenLöschenButtonActionPerformed(evt);
            }
        });

        adminHinzufügenButton.setBackground(new java.awt.Color(51, 204, 255));
        adminHinzufügenButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        adminHinzufügenButton.setText("Neuen Admin Hinzufügen");
        adminHinzufügenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                adminHinzufügenButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                adminHinzufügenButtonMouseExited(evt);
            }
        });
        adminHinzufügenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminHinzufügenButtonActionPerformed(evt);
            }
        });

        geburtsdatumfeld.setDateFormatString("dd-MM-yyyy");
        geburtsdatumfeld.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                geburtsdatumfeldComponentRemoved(evt);
            }
        });

        zurück.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc\\Desktop\\Tulpar için\\Bachelorarbeit\\Icons & Bilder\\back.png")); // NOI18N
        zurück.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zurückMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                zurückMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                zurückMouseExited(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("AdminID :");

        adminIDfeld.setEnabled(false);

        refreshIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc\\Desktop\\Tulpar için\\Bachelorarbeit\\Icons & Bilder\\refresh.png")); // NOI18N
        refreshIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshIconMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshIconMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshIconMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(56, 56, 56)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(NARemailsFeld, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                    .addComponent(NARkennwortsfeld2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                    .addComponent(NARnicknameFeld)
                                                    .addComponent(NARkennwortsfeld1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                    .addComponent(NARvornameFeld, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                    .addComponent(NARnachnameFeld, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                                    .addComponent(geburtsdatumfeld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(adminIDfeld)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(22, 22, 22)
                                                .addComponent(NARnummerFeld, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(30, 30, 30)
                                            .addComponent(maenlich, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(6, 6, 6)
                                            .addComponent(weiblich, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(32, 32, 32)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(andere, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(refreshIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(datenAktualisierenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(datenLöschenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(43, 43, 43)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(adminHinzufügenButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(zurück)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 813, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(adminIDfeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(refreshIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(NARnicknameFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(NARkennwortsfeld1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(NARkennwortsfeld2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NARvornameFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(NARnachnameFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(geburtsdatumfeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(maenlich)
                            .addComponent(weiblich)
                            .addComponent(andere))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(NARemailsFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(NARnummerFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(datenAktualisierenButton)
                            .addComponent(datenLöschenButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(adminHinzufügenButton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(zurück)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NARnicknameFeldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NARnicknameFeldKeyTyped
        //Hier ermöglicht uns, dass man für einen Nicknamen maximal 20 Karakter benutzen darf.
        if((NARnicknameFeld.getText() + evt.getKeyChar()).length() >= 30){
            evt.consume();
        }
    }//GEN-LAST:event_NARnicknameFeldKeyTyped

    private void NARvornameFeldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NARvornameFeldKeyTyped
        //Hier ermöglicht uns, dass man für Vornamen maximal 20 Karakter benutzen darf.
        if((NARvornameFeld.getText() + evt.getKeyChar()).length() >= 30){
            evt.consume();
        }
        
        //User kann nur Buchstaben beim Vornamefeld benutzen.
        if(!(Character.isAlphabetic(evt.getKeyChar())) || (evt.getKeyChar()==KeyEvent.VK_BACK_SPACE) || (evt.getKeyChar()==KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }//GEN-LAST:event_NARvornameFeldKeyTyped

    private void datenAktualisierenButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datenAktualisierenButtonMouseEntered
        datenAktualisierenButton.setBackground(new Color(0,100,200));
    }//GEN-LAST:event_datenAktualisierenButtonMouseEntered

    private void datenAktualisierenButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datenAktualisierenButtonMouseExited
        datenAktualisierenButton.setBackground(new Color(51,204,255));
    }//GEN-LAST:event_datenAktualisierenButtonMouseExited

    private void NARnachnameFeldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NARnachnameFeldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NARnachnameFeldActionPerformed

    private void NARnachnameFeldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NARnachnameFeldKeyTyped
        //Hier ermöglicht uns, dass man für Vornamen maximal 20 Karakter benutzen darf.
        if((NARnachnameFeld.getText() + evt.getKeyChar()).length() >= 30){
            evt.consume();
        }
        
        //User kann nur Buchstaben beim Nachnamefeld benutzen.
        if(!(Character.isAlphabetic(evt.getKeyChar())) || (evt.getKeyChar()==KeyEvent.VK_BACK_SPACE) || (evt.getKeyChar()==KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }//GEN-LAST:event_NARnachnameFeldKeyTyped

    private void NARemailsFeldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NARemailsFeldKeyTyped
        //Hier ermöglicht uns, dass man für email maximal 40 Karakter benutzen darf.
        if((NARemailsFeld.getText() + evt.getKeyChar()).length() >= 40){
            evt.consume();
        }
    }//GEN-LAST:event_NARemailsFeldKeyTyped

    private void NARnummerFeldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NARnummerFeldKeyTyped
        //Hier ermöglicht uns, dass man für Handynummer maximal 15 Karakter benutzen darf.
        if((NARnummerFeld.getText() + evt.getKeyChar()).length() >= 15){
            evt.consume();
        }

        //Hier erlauben wir den User, dass er nur Nummer als Input eingibt
        if(!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_NARnummerFeldKeyTyped

    private void NARkennwortsfeld1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NARkennwortsfeld1FocusGained
        if(String.valueOf(NARkennwortsfeld1.getPassword()).toLowerCase().equals("kennwort")){
            NARkennwortsfeld1.setText("");
            NARkennwortsfeld1.setForeground(Color.black);
        }
    }//GEN-LAST:event_NARkennwortsfeld1FocusGained

    private void NARkennwortsfeld1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NARkennwortsfeld1FocusLost
        //damit das Feld in seine älteren Eigenschaften umgewandelt wird.
        String kennwortA = String.valueOf(NARkennwortsfeld1.getPassword());
        if(kennwortA.equals("") || kennwortA.toLowerCase().equals("kennwort")){
            NARkennwortsfeld1.setText("Kennwort");
            NARkennwortsfeld1.setForeground(Color.black);
        }
    }//GEN-LAST:event_NARkennwortsfeld1FocusLost

    private void NARkennwortsfeld1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NARkennwortsfeld1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NARkennwortsfeld1ActionPerformed

    private void NARkennwortsfeld1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NARkennwortsfeld1KeyTyped
        //Hier ermöglicht uns, dass man für Kennwort maximal 20 Karakter benutzen darf.
        if((String.valueOf(NARkennwortsfeld1.getPassword())+ evt.getKeyChar()).length() >= 30){
            evt.consume();
        }
    }//GEN-LAST:event_NARkennwortsfeld1KeyTyped

    private void NARkennwortsfeld2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NARkennwortsfeld2FocusGained
        if(String.valueOf(NARkennwortsfeld2.getPassword()).toLowerCase().equals("kennwort")){
            NARkennwortsfeld2.setText("");
            NARkennwortsfeld2.setForeground(Color.black);
        }
    }//GEN-LAST:event_NARkennwortsfeld2FocusGained

    private void NARkennwortsfeld2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NARkennwortsfeld2FocusLost
        //damit das Feld in seine älteren Eigenschaften umgewandelt wird.
        String kennwortA = String.valueOf(NARkennwortsfeld2.getPassword());
        if(kennwortA.equals("") || kennwortA.equals("kennwort")){
            NARkennwortsfeld2.setText("Kennwort");
            NARkennwortsfeld2.setForeground(Color.black);
        }
    }//GEN-LAST:event_NARkennwortsfeld2FocusLost

    private void NARkennwortsfeld2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NARkennwortsfeld2KeyTyped
        //Hier ermöglicht uns, dass man für Kennwort maximal 20 Karakter benutzen darf.
        if((String.valueOf(NARkennwortsfeld2.getPassword()) + evt.getKeyChar()).length() >= 30){
            evt.consume();
        }
    }//GEN-LAST:event_NARkennwortsfeld2KeyTyped

    private void datenLöschenButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datenLöschenButtonMouseEntered
        datenLöschenButton.setBackground(new Color(0,100,200));
    }//GEN-LAST:event_datenLöschenButtonMouseEntered

    private void datenLöschenButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datenLöschenButtonMouseExited
        datenLöschenButton.setBackground(new Color(51,204,255));
    }//GEN-LAST:event_datenLöschenButtonMouseExited

    private void adminHinzufügenButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminHinzufügenButtonMouseEntered
        adminHinzufügenButton.setBackground(new Color(0,100,200));
    }//GEN-LAST:event_adminHinzufügenButtonMouseEntered

    private void adminHinzufügenButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminHinzufügenButtonMouseExited
        adminHinzufügenButton.setBackground(new Color(51,204,255));
    }//GEN-LAST:event_adminHinzufügenButtonMouseExited

    private void adminHinzufügenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminHinzufügenButtonActionPerformed
        dispose();
        new NeueAdminRegistrierung().setVisible(true);
    }//GEN-LAST:event_adminHinzufügenButtonActionPerformed

    private void geburtsdatumfeldComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_geburtsdatumfeldComponentRemoved
        
    }//GEN-LAST:event_geburtsdatumfeldComponentRemoved

    private void tabelleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelleMouseClicked
        //sich in der Tabelle befundenen Daten in die Lücken links übertagen
        int index = tabelle.getSelectedRow();
        try {
            admindaten_inLücken_übertragen(index);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_tabelleMouseClicked

    private void datenLöschenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datenLöschenButtonActionPerformed
        if(!adminIDfeld.getText().isEmpty()){
            try {
                PreparedStatement st;
                ResultSet rs;
                
                String SQLAnfrage = "DELETE FROM admin WHERE adminID=?";
                
                st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage);
                st.setInt(1, Integer.valueOf(adminIDfeld.getText()));
                st.executeUpdate();
                    admindaten_live_zeigen();
                JOptionPane.showMessageDialog(null, "Admindaten sind gelöscht!");
                FelderSauberMachen();
            } catch (Exception e) { 
                e.printStackTrace();
            }
        }else{
            JOptionPane.showMessageDialog(null, "zu löschende Admindaten wurden im System nicht gefunden","FEHLER",2);
            FelderSauberMachen();
        }
    }//GEN-LAST:event_datenLöschenButtonActionPerformed

    private void datenAktualisierenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datenAktualisierenButtonActionPerformed
        
        if(InputPrüfen()){
            if(!adminIDfeld.getText().isEmpty()){
                if(geburtsdatumfeld.getDate()==null){

                    try {
                    //kennwortskontrolle
                    if(String.valueOf(NARkennwortsfeld1.getPassword()).equals(String.valueOf(NARkennwortsfeld2.getPassword()))){
                    PreparedStatement st;
                    ResultSet rs;

                    String SQLAnfrage = "UPDATE admin SET nickname=? , kennwort=? , vorname=? , nachname=? , geschlecht=? , email=? , handynummer=?";

                    st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage);

                    //SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

                        String geschlecht = "männlich";
                        if(weiblich.isSelected()){
                            geschlecht = "weiblich";
                        }
                        else if(andere.isSelected()){
                            geschlecht = "andere";
                        }

                    st.setString(1, NARnicknameFeld.getText());
                    st.setString(2, String.valueOf(NARkennwortsfeld1.getPassword()));
                    st.setString(3, NARnachnameFeld.getText());
                    st.setString(4, NARvornameFeld.getText());
                    st.setString(5, geschlecht);
                    st.setString(6, NARemailsFeld.getText());
                    st.setString(7, NARnummerFeld.getText());
                    st.executeUpdate();

                        admindaten_live_zeigen();
                        FelderSauberMachen();
                            JOptionPane.showMessageDialog(null, "Admindaten wurden erfolgreich aktualisiert!");
                    }else{
                        JOptionPane.showMessageDialog(null, "Kennworte stimmen nicht überein!","FEHLER bei Kennwort",2);
                        FelderSauberMachen();
                    }

                } catch (Exception e) {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null, "Etwas schiefgelaufen!","FEHLER",2);
                    FelderSauberMachen();
                }

                }else{
                    try {
                    //kennwortskontrolle
                    if(String.valueOf(NARkennwortsfeld1.getPassword()).equals(String.valueOf(NARkennwortsfeld2.getPassword()))){
                        PreparedStatement st;
                        ResultSet rs;

                        String SQLAnfrage = "UPDATE admin SET nickname=? , kennwort=? , vorname=? , nachname=? , geburtsdatum=? , geschlecht=? , email=? , handynummer=? where adminID=?";

                        st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage);

                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

                        String geschlecht = "männlich";
                        if(weiblich.isSelected()){
                            geschlecht = "weiblich";
                        }
                        else if(andere.isSelected()){
                            geschlecht = "andere";
                        }

                        st.setString(1, NARnicknameFeld.getText());
                        st.setString(2, String.valueOf(NARkennwortsfeld1.getPassword()));
                        st.setString(3, NARvornameFeld.getText());
                        st.setString(4, NARnachnameFeld.getText());
                        if(!geburtsdatumfeld.equals(null)){
                            st.setString(5, dateFormat.format(geburtsdatumfeld.getDate()));
                        }
                        st.setString(6, geschlecht);
                        st.setString(7, NARemailsFeld.getText());
                        st.setString(8, NARnummerFeld.getText());
                        st.setInt(9, Integer.valueOf(adminIDfeld.getText()));
                        st.executeUpdate();

                            admindaten_live_zeigen();
                            FelderSauberMachen();
                        JOptionPane.showMessageDialog(null, "Admindaten wurden erfolgreich aktualisiert!");

                    }else{
                        JOptionPane.showMessageDialog(null, "Kennworte stimmen nicht überein!","FEHLER bei Kennwort",2);
                        FelderSauberMachen();
                    }

                } catch (Exception e) {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(null, "Etwas schiefgelaufen!","FEHLER",2);
                    FelderSauberMachen();
                }
                }
            }else{
            JOptionPane.showMessageDialog(null, "zu aktualisierende Admindaten wurden im System nicht gefunden","Fehler",2);
        }
        }
    }//GEN-LAST:event_datenAktualisierenButtonActionPerformed

    private void zurückMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zurückMouseEntered
        Border border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black);
        zurück.setBorder(border);
    }//GEN-LAST:event_zurückMouseEntered

    private void zurückMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zurückMouseExited
        zurück.setBorder(null);
    }//GEN-LAST:event_zurückMouseExited

    private void zurückMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zurückMouseClicked
        dispose();
        new Weiterleitungsfenster().setVisible(true);
    }//GEN-LAST:event_zurückMouseClicked

    private void refreshIconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshIconMouseEntered
        Border border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black);
        refreshIcon.setBorder(border);
    }//GEN-LAST:event_refreshIconMouseEntered

    private void refreshIconMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshIconMouseExited
        refreshIcon.setBorder(null);
    }//GEN-LAST:event_refreshIconMouseExited

    private void refreshIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshIconMouseClicked
        FelderSauberMachen();
    }//GEN-LAST:event_refreshIconMouseClicked

    //Durch diese Methode werden die Inputs bei Felder gelöscht
    void FelderSauberMachen(){
        adminIDfeld.setText("");
        NARnicknameFeld.setText("");
        NARkennwortsfeld1.setText("kennwort");
        NARkennwortsfeld2.setText("kennwort");
        NARvornameFeld.setText("");
        NARnachnameFeld.setText("");
        geburtsdatumfeld.setDate(null);
        /*
            //um das heutige Datum zu bekommen
            String pattern = "dd-MM-yyyy";
            String dateInString =new SimpleDateFormat(pattern).format(new java.util.Date());  
        NARgeburtsdatumFeld.setDate(new SimpleDateFormat("dd-MM-yyyy").parse(dateInString));  
        */
        maenlich.setSelected(false);
        weiblich.setSelected(false);
        andere.setSelected(false);
        NARemailsFeld.setText("");
        NARnummerFeld.setText("");
    }
    ArrayList<AdminDatenColumns>getAdminDaten(){
        
        //hier speichern wir die ganzen Admindaten
        ArrayList<AdminDatenColumns> admins = new ArrayList<>();
        
        PreparedStatement st;
        ResultSet rs;
        
        String SQLAnfrage = "SELECT * FROM admin";
        
        try {
            st = dBVerbindung.getConnection().prepareStatement(SQLAnfrage);
            rs = st.executeQuery();
            
            //eine Objekt von der Klasse AdminDatenZeigen, damit die sich im System vorhandenen Admindaten gespeichert werden
            AdminDatenColumns admin;
            
            while(rs.next()){
                admin = new AdminDatenColumns(rs.getInt("adminID"),rs.getString("nickname"),rs.getString("kennwort"),rs.getString("vorname")
                    , rs.getString("nachname"), rs.getString("geburtsdatum"), rs.getString("geschlecht"),rs.getString("email"),rs.getString("handynummer"));
                admins.add(admin);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return admins;
    }
    
    void admindaten_live_zeigen(){
        try {
            ArrayList<AdminDatenColumns> admins_list = getAdminDaten();
            DefaultTableModel model = (DefaultTableModel)tabelle.getModel();
                model.setRowCount(0);
            Object[] row = new Object[9];
            for(int i=0;i<admins_list.size();i++){
                row[0] = admins_list.get(i).getAdminID();
                row[1] = admins_list.get(i).getNickname();
                row[2] = admins_list.get(i).getKennwort();
                row[3] = admins_list.get(i).getVorname();
                row[4] = admins_list.get(i).getNachname();
                row[5] = admins_list.get(i).getGeburtsdatum();
                row[6] = admins_list.get(i).getGeschlecht();
                row[7] = admins_list.get(i).getEmail();
                row[8] = admins_list.get(i).getHandynummer();
                
                //durch die Methode unten, zeigen wir die Admindaten rechtzeitig
                model.addRow(row);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    void admindaten_inLücken_übertragen(int index){
        try {
            adminIDfeld.setText(String.valueOf(getAdminDaten().get(index).getAdminID()));
            NARnicknameFeld.setText(getAdminDaten().get(index).getNickname());
            NARkennwortsfeld1.setText(getAdminDaten().get(index).getKennwort());
            NARkennwortsfeld2.setText(getAdminDaten().get(index).getKennwort());
            NARvornameFeld.setText(getAdminDaten().get(index).getVorname());
            NARnachnameFeld.setText(getAdminDaten().get(index).getNachname());
            //geburtsdatum live zeigen
                SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                java.util.Date dateDatum = format.parse(getAdminDaten().get(index).getGeburtsdatum());
                java.sql.Date sqlDatum = new java.sql.Date(dateDatum.getTime());
                geburtsdatumfeld.setDate(sqlDatum);
            NARemailsFeld.setText(getAdminDaten().get(index).getEmail());
            NARnummerFeld.setText(getAdminDaten().get(index).getHandynummer());
            
            if(getAdminDaten().get(index).getGeschlecht().equals("männlich")){
                maenlich.setSelected(true);
                weiblich.setSelected(false);
                andere.setSelected(false);
            }else if(getAdminDaten().get(index).getGeschlecht().equals("weiblich")){
                weiblich.setSelected(true);
                maenlich.setSelected(false);
                andere.setSelected(false);
            }else{
                andere.setSelected(true);
                maenlich.setSelected(false);
                weiblich.setSelected(false);
            }
                //geburtsdatum holen
                /*Date datum = (Date) new SimpleDateFormat("dd-MM-yyyy").parse((String)getAdminDaten().get(index).getGeburtsdatum());
                geburtsdatumfeld.setDate(datum); */
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    //Hier wird nachgeprüft, ob Inputs vollständig und Kennworte übereinstimmend erfüllt sind.
    boolean InputPrüfen(){
        String nickname = NARnicknameFeld.getText();
        String kennwort = String.valueOf(NARkennwortsfeld1.getPassword());
        String kennwort2 = String.valueOf(NARkennwortsfeld2.getPassword());
        String vorname = NARvornameFeld.getText();
        String nachname = NARnachnameFeld.getText();
        String geschlecht = "männlich";
        if(weiblich.isSelected()){
            geschlecht = "weiblich";
        }
        else if(andere.isSelected()){
            geschlecht = "andere";
        }
        String email = NARemailsFeld.getText();
        String handynummer = NARnummerFeld.getText();
        
        if(nickname.trim().equals("") || (vorname.trim().equals("")) || nachname.trim().equals("") || geburtsdatumfeld.getDate()==null
           || email.trim().equals("") || handynummer.trim().equals("")){
            JOptionPane.showMessageDialog(null, "Jedes Feld muss vollständig erfüllt werden!","FEHLER bei Input",2);
            FelderSauberMachen();
            return false;
        }
        else if(!kennwort.equals(kennwort2)){
            JOptionPane.showMessageDialog(null, "Kennworte stimmen nicht überein!","FEHLER bei Kennwort",2);
            FelderSauberMachen();
            return false;
        }
        else{
            return true;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDatenZeigen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDatenZeigen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDatenZeigen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDatenZeigen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDatenZeigen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NARemailsFeld;
    private javax.swing.JPasswordField NARkennwortsfeld1;
    private javax.swing.JPasswordField NARkennwortsfeld2;
    private javax.swing.JTextField NARnachnameFeld;
    private javax.swing.JTextField NARnicknameFeld;
    private javax.swing.JTextField NARnummerFeld;
    private javax.swing.JTextField NARvornameFeld;
    private javax.swing.JButton adminHinzufügenButton;
    private javax.swing.JTextField adminIDfeld;
    private javax.swing.JRadioButton andere;
    private javax.swing.JButton datenAktualisierenButton;
    private javax.swing.JButton datenLöschenButton;
    private com.toedter.calendar.JDateChooser geburtsdatumfeld;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton maenlich;
    private javax.swing.JLabel refreshIcon;
    private javax.swing.JTable tabelle;
    private javax.swing.JRadioButton weiblich;
    private javax.swing.JLabel zurück;
    // End of variables declaration//GEN-END:variables
}
